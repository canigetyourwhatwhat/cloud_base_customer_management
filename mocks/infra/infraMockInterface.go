// Code generated by MockGen. DO NOT EDIT.
// Source: infra/infra.go

// Package mock_infra is a generated GoMock package.
package mock_infra

import (
	context "context"
	reflect "reflect"

	customers "github.com/erply/api-go-wrapper/pkg/api/customers"
	gomock "github.com/golang/mock/gomock"
)

// MockDataHandler is a mock of DataHandler interface.
type MockDataHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDataHandlerMockRecorder
}

// MockDataHandlerMockRecorder is the mock recorder for MockDataHandler.
type MockDataHandlerMockRecorder struct {
	mock *MockDataHandler
}

// NewMockDataHandler creates a new mock instance.
func NewMockDataHandler(ctrl *gomock.Controller) *MockDataHandler {
	mock := &MockDataHandler{ctrl: ctrl}
	mock.recorder = &MockDataHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataHandler) EXPECT() *MockDataHandlerMockRecorder {
	return m.recorder
}

// GetCustomerByCustomerID mocks base method.
func (m *MockDataHandler) GetCustomerByCustomerID(ctx context.Context, customerID string) (*customers.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByCustomerID", ctx, customerID)
	ret0, _ := ret[0].(*customers.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByCustomerID indicates an expected call of GetCustomerByCustomerID.
func (mr *MockDataHandlerMockRecorder) GetCustomerByCustomerID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByCustomerID", reflect.TypeOf((*MockDataHandler)(nil).GetCustomerByCustomerID), ctx, customerID)
}

// InsertCustomer mocks base method.
func (m *MockDataHandler) InsertCustomer(ctx context.Context, customer *customers.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCustomer indicates an expected call of InsertCustomer.
func (mr *MockDataHandlerMockRecorder) InsertCustomer(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCustomer", reflect.TypeOf((*MockDataHandler)(nil).InsertCustomer), ctx, customer)
}

// MockCustomerHandler is a mock of CustomerHandler interface.
type MockCustomerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerHandlerMockRecorder
}

// MockCustomerHandlerMockRecorder is the mock recorder for MockCustomerHandler.
type MockCustomerHandlerMockRecorder struct {
	mock *MockCustomerHandler
}

// NewMockCustomerHandler creates a new mock instance.
func NewMockCustomerHandler(ctrl *gomock.Controller) *MockCustomerHandler {
	mock := &MockCustomerHandler{ctrl: ctrl}
	mock.recorder = &MockCustomerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerHandler) EXPECT() *MockCustomerHandlerMockRecorder {
	return m.recorder
}

// GetCustomerByCustomerID mocks base method.
func (m *MockCustomerHandler) GetCustomerByCustomerID(ctx context.Context, customerID string) (*customers.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByCustomerID", ctx, customerID)
	ret0, _ := ret[0].(*customers.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByCustomerID indicates an expected call of GetCustomerByCustomerID.
func (mr *MockCustomerHandlerMockRecorder) GetCustomerByCustomerID(ctx, customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByCustomerID", reflect.TypeOf((*MockCustomerHandler)(nil).GetCustomerByCustomerID), ctx, customerID)
}

// InsertCustomer mocks base method.
func (m *MockCustomerHandler) InsertCustomer(ctx context.Context, customer *customers.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCustomer indicates an expected call of InsertCustomer.
func (mr *MockCustomerHandlerMockRecorder) InsertCustomer(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCustomer", reflect.TypeOf((*MockCustomerHandler)(nil).InsertCustomer), ctx, customer)
}
