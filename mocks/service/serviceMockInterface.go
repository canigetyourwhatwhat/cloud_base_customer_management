// Code generated by MockGen. DO NOT EDIT.
// Source: service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	customers "github.com/erply/api-go-wrapper/pkg/api/customers"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomerServiceHandler is a mock of CustomerServiceHandler interface.
type MockCustomerServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceHandlerMockRecorder
}

// MockCustomerServiceHandlerMockRecorder is the mock recorder for MockCustomerServiceHandler.
type MockCustomerServiceHandlerMockRecorder struct {
	mock *MockCustomerServiceHandler
}

// NewMockCustomerServiceHandler creates a new mock instance.
func NewMockCustomerServiceHandler(ctrl *gomock.Controller) *MockCustomerServiceHandler {
	mock := &MockCustomerServiceHandler{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerServiceHandler) EXPECT() *MockCustomerServiceHandlerMockRecorder {
	return m.recorder
}

// CreateCustomer mocks base method.
func (m *MockCustomerServiceHandler) CreateCustomer(ctx context.Context, customer *customers.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustomer", ctx, customer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCustomer indicates an expected call of CreateCustomer.
func (mr *MockCustomerServiceHandlerMockRecorder) CreateCustomer(ctx, customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustomer", reflect.TypeOf((*MockCustomerServiceHandler)(nil).CreateCustomer), ctx, customer)
}

// GetCustomerByCustomerID mocks base method.
func (m *MockCustomerServiceHandler) GetCustomerByCustomerID(ctx context.Context, customerId string) (*customers.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerByCustomerID", ctx, customerId)
	ret0, _ := ret[0].(*customers.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerByCustomerID indicates an expected call of GetCustomerByCustomerID.
func (mr *MockCustomerServiceHandlerMockRecorder) GetCustomerByCustomerID(ctx, customerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerByCustomerID", reflect.TypeOf((*MockCustomerServiceHandler)(nil).GetCustomerByCustomerID), ctx, customerId)
}
